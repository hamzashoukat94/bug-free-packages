<?php

declare(strict_types=1);

/*
 * TestForDatetimeInModelLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TestForDatetimeInModelLib\Models;

use stdClass;

class ServerResponse implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $passed;

    /**
     * @var string|null
     */
    private $message;

    /**
     * @var array|null
     */
    private $input;

    /**
     * @param bool $passed
     */
    public function __construct(bool $passed)
    {
        $this->passed = $passed;
    }

    /**
     * Returns Passed.
     */
    public function getPassed(): bool
    {
        return $this->passed;
    }

    /**
     * Sets Passed.
     *
     * @required
     * @maps passed
     */
    public function setPassed(bool $passed): void
    {
        $this->passed = $passed;
    }

    /**
     * Returns Message.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * Sets Message.
     *
     * @maps Message
     */
    public function setMessage(?string $message): void
    {
        $this->message = $message;
    }

    /**
     * Returns Input.
     */
    public function getInput(): ?array
    {
        return $this->input;
    }

    /**
     * Sets Input.
     *
     * @maps input
     */
    public function setInput(?array $input): void
    {
        $this->input = $input;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['passed']      = $this->passed;
        if (isset($this->message)) {
            $json['Message'] = $this->message;
        }
        if (isset($this->input)) {
            $json['input']   = $this->input;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
