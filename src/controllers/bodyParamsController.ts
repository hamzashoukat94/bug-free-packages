/**
 * Test for Datetime in ModelLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DateTimeModel, dateTimeModelSchema } from '../models/dateTimeModel';
import {
  Rfc1123DateTime,
  rfc1123DateTimeSchema,
} from '../models/rfc1123DateTime';
import {
  Rfc1123DateTimeArray,
  rfc1123DateTimeArraySchema,
} from '../models/rfc1123DateTimeArray';
import {
  Rfc1123DateTimeMap,
  rfc1123DateTimeMapSchema,
} from '../models/rfc1123DateTimeMap';
import {
  Rfc3339DateTimeArray,
  rfc3339DateTimeArraySchema,
} from '../models/rfc3339DateTimeArray';
import {
  Rfc3339DateTimeMap,
  rfc3339DateTimeMapSchema,
} from '../models/rfc3339DateTimeMap';
import { ServerResponse, serverResponseSchema } from '../models/serverResponse';
import { UnixDateTime, unixDateTimeSchema } from '../models/unixDateTime';
import {
  UnixDateTimeArray,
  unixDateTimeArraySchema,
} from '../models/unixDateTimeArray';
import {
  UnixDateTimeMap,
  unixDateTimeMapSchema,
} from '../models/unixDateTimeMap';
import { array, number, string } from '../schema';
import { BaseController } from './baseController';

export class BodyParamsController extends BaseController {
  /**
   * @param datetime
   * @return Response from the API call
   */
  async createSendRfc3339DateTime(
    datetime: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc3339datetime');
    const mapped = req.prepareArgs({ datetime: [datetime, string()] });
    req.text(mapped.datetime);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param datetime
   * @return Response from the API call
   */
  async createSendRfc1123DateTime(
    datetime: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc1123datetime');
    const mapped = req.prepareArgs({ datetime: [datetime, string()] });
    req.text(mapped.datetime);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param datetime
   * @return Response from the API call
   */
  async createSendUnixDateTime(
    datetime: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/unixdatetime');
    const mapped = req.prepareArgs({ datetime: [datetime, number()] });
    req.json(mapped.datetime);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param datetimes
   * @return Response from the API call
   */
  async createSendRfc3339DateTimeArray(
    datetimes: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc3339datetime');
    const mapped = req.prepareArgs({ datetimes: [datetimes, array(string())] });
    req.query('array', 'true');
    req.json(mapped.datetimes);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param datetimes
   * @return Response from the API call
   */
  async createSendRfc1123DateTimeArray(
    datetimes: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc1123datetime');
    const mapped = req.prepareArgs({ datetimes: [datetimes, array(string())] });
    req.query('array', 'true');
    req.json(mapped.datetimes);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param datetimes
   * @return Response from the API call
   */
  async createSendUnixDateTimeArray(
    datetimes: number[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/unixdatetime');
    const mapped = req.prepareArgs({ datetimes: [datetimes, array(number())] });
    req.query('array', 'true');
    req.json(mapped.datetimes);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createSendRfc1123DateTimeInBodyAsModel(
    body: Rfc1123DateTime,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc1123DateTimeInModel');
    const mapped = req.prepareArgs({ body: [body, rfc1123DateTimeSchema] });
    req.json(mapped.body);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param data
   * @return Response from the API call
   */
  async createSendRfc3339DateTimeInBodyAsModel(
    data: DateTimeModel,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/dateTimeInModel');
    const mapped = req.prepareArgs({ data: [data, dateTimeModelSchema] });
    req.json(mapped.data);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async createSendUnixDateTimeInBodyAsModel(
    body: UnixDateTime,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/unixDateTimeInModel');
    const mapped = req.prepareArgs({ body: [body, unixDateTimeSchema] });
    req.json(mapped.body);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param data
   * @return Response from the API call
   */
  async createSendRfc3339DateTimeArrayInBodyAsModel(
    data: Rfc3339DateTimeArray,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc3339DateTimeArrayAsModel');
    const mapped = req.prepareArgs({
      data: [data, rfc3339DateTimeArraySchema],
    });
    req.json(mapped.data);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param data
   * @return Response from the API call
   */
  async createSendUnixDateTimeArrayInBodyAsModel(
    data: UnixDateTimeArray,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/unixDateTimeArrayAsModel');
    const mapped = req.prepareArgs({ data: [data, unixDateTimeArraySchema] });
    req.json(mapped.data);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param data
   * @return Response from the API call
   */
  async createSendRfc3339DateTimeMapInBodyAsModel(
    data: Rfc3339DateTimeMap,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc3339DateTimeMapAsModel');
    const mapped = req.prepareArgs({ data: [data, rfc3339DateTimeMapSchema] });
    req.json(mapped.data);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param data
   * @return Response from the API call
   */
  async createSendRfc1123DateTimeMapInBodyAsModel(
    data: Rfc1123DateTimeMap,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc1123DateTimeMapAsModel');
    const mapped = req.prepareArgs({ data: [data, rfc1123DateTimeMapSchema] });
    req.json(mapped.data);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param data
   * @return Response from the API call
   */
  async createSendUnixDateTimeMapInBodyAsModel(
    data: UnixDateTimeMap,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/unixDateTimeMapAsModel');
    const mapped = req.prepareArgs({ data: [data, unixDateTimeMapSchema] });
    req.json(mapped.data);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }

  /**
   * @param data
   * @return Response from the API call
   */
  async createSendRfc1123DateTimeArrayInBodyAsModel(
    data: Rfc1123DateTimeArray,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServerResponse>> {
    const req = this.createRequest('POST', '/body/rfc1123DateTimeArrayAsModel');
    const mapped = req.prepareArgs({
      data: [data, rfc1123DateTimeArraySchema],
    });
    req.json(mapped.data);
    return req.callAsJson(serverResponseSchema, requestOptions);
  }
}
