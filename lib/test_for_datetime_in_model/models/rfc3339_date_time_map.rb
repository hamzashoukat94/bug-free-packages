# test_for_datetime_in_model
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module TestForDatetimeInModel
  # Rfc3339DateTimeMap Model.
  class Rfc3339DateTimeMap < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Hash of DateTime]
    attr_accessor :date_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['date_time'] = 'dateTime'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(date_time = nil)
      @date_time = date_time
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is a hash, so we need to iterate through it
      date_time = nil
      unless hash['dateTime'].nil?
        date_time = {}
        hash['dateTime'].each do |key, datetime_string|
          date_time[key] = DateTimeHelper.from_rfc3339(datetime_string)
        end
      end

      date_time = nil unless hash.key?('dateTime')

      # Create object from extracted values.
      Rfc3339DateTimeMap.new(date_time)
    end

    def to_date_time(hash, key)
      DateTimeHelper.to_rfc3339_map(date_time, hash, key)
    end
  end
end
