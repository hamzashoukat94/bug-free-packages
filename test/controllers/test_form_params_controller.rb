# test_for_datetime_in_model
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class FormParamsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.form_params
    @response_catcher = @controller.http_call_back
  end

  # Todo: Add description for test test_send_date_array
  def test_send_date_array()
    # Parameters for the API call
    dates = APIHelper.json_deserialize(
      '["1994-02-13","1994-02-13"]', false).map { |element| Date.iso8601(element) }

    # Perform the API call through the SDK function
    result = @controller.create_send_date_array(dates)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc3339_date_time_array
  def test_send_rfc3339_date_time_array()
    # Parameters for the API call
    datetimes = APIHelper.json_deserialize(
      '["1994-02-13T14:01:54.9571247Z","1994-02-13T14:01:54.9571247Z"]', false).map { |element| DateTimeHelper.from_rfc3339(element) }

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc3339_date_time_array(datetimes)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc1123_date_time_array
  def test_send_rfc1123_date_time_array()
    # Parameters for the API call
    datetimes = APIHelper.json_deserialize(
      '["Sun, 06 Nov 1994 08:49:37 GMT","Sun, 06 Nov 1994 08:49:37 GMT"]', false).map { |element| DateTimeHelper.from_rfc1123(element) }

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc1123_date_time_array(datetimes)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_unix_date_time_array
  def test_send_unix_date_time_array()
    # Parameters for the API call
    datetimes = APIHelper.json_deserialize(
      '[1484719381,1484719381]', false).map { |element| DateTimeHelper.from_unix(element) }

    # Perform the API call through the SDK function
    result = @controller.create_send_unix_date_time_array(datetimes)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc1123_date_time
  def test_send_rfc1123_date_time()
    # Parameters for the API call
    datetime = DateTimeHelper.from_rfc1123('Sun, 06 Nov 1994 08:49:37 GMT')

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc1123_date_time(datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_rfc3339_date_time
  def test_send_rfc3339_date_time()
    # Parameters for the API call
    datetime = DateTimeHelper.from_rfc3339('1994-02-13T14:01:54.9571247Z')

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc3339_date_time(datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_send_unix_date_time
  def test_send_unix_date_time()
    # Parameters for the API call
    datetime = DateTimeHelper.from_unix(1484719381)

    # Perform the API call through the SDK function
    result = @controller.create_send_unix_date_time(datetime)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Todo: Add description for test test_rfc1123_date_time_in_form_as_model
  def test_rfc1123_date_time_in_form_as_model()
    # Parameters for the API call
    body = Rfc1123DateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":"Sun, 06 Nov 1994 08:49:37 GMT"}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc1123_date_time_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_rfc3339_date_time_in_form_as_model
  def test_rfc3339_date_time_in_form_as_model()
    # Parameters for the API call
    body = DateTimeModel.from_hash(APIHelper.json_deserialize(
      '{"dateTime":"1994-02-13T14:01:54.9571247Z"}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc3339_date_time_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_unix_date_time_in_form_as_model
  def test_unix_date_time_in_form_as_model()
    # Parameters for the API call
    body = UnixDateTime.from_hash(APIHelper.json_deserialize(
      '{"dateTime":1484719381}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_unix_date_time_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_rfc3339_date_time_array_in_form_as_model
  def test_rfc3339_date_time_array_in_form_as_model()
    # Parameters for the API call
    body = Rfc3339DateTimeArray.from_hash(APIHelper.json_deserialize(
      '{"dateTime":["1994-02-13T14:01:54.9571247Z","1994-02-13T14:01:54.957124'\
      '7Z"]}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc3339_date_time_array_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_rfc1123_date_time_array_in_form_as_model
  def test_rfc1123_date_time_array_in_form_as_model()
    # Parameters for the API call
    body = Rfc1123DateTimeArray.from_hash(APIHelper.json_deserialize(
      '{"dateTime":["Sun, 06 Nov 1994 08:49:37 GMT","Sun, 06 Nov 1994 08:49:37'\
      ' GMT"]}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc1123_date_time_array_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_unix_date_time_array_in_form_as_model
  def test_unix_date_time_array_in_form_as_model()
    # Parameters for the API call
    body = UnixDateTimeArray.from_hash(APIHelper.json_deserialize(
      '{"dateTime":[1484719381,1484719381]}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_unix_date_time_array_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_unix_date_time_map_in_form_as_model
  def test_unix_date_time_map_in_form_as_model()
    # Parameters for the API call
    body = UnixDateTimeMap.from_hash(APIHelper.json_deserialize(
      '{"dateTime":{"key":1484719381}}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_unix_date_time_map_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_rfc3339_date_time_map_in_form_as_model
  def test_rfc3339_date_time_map_in_form_as_model()
    # Parameters for the API call
    body = Rfc3339DateTimeMap.from_hash(APIHelper.json_deserialize(
      '{"dateTime":{"key":"1994-02-13T14:01:54.9571247Z"}}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc3339_date_time_map_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Todo: Add description for test test_rfc1123_date_time_map_in_form_as_model
  def test_rfc1123_date_time_map_in_form_as_model()
    # Parameters for the API call
    body = Rfc1123DateTimeMap.from_hash(APIHelper.json_deserialize(
      '{"dateTime":{"key":"Sun, 06 Nov 1994 08:49:37 GMT"}}', false))

    # Perform the API call through the SDK function
    result = @controller.create_send_rfc1123_date_time_map_in_form_as_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

end
