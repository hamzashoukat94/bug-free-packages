<?php

declare(strict_types=1);

/*
 * TestForDatetimeInModelLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TestForDatetimeInModelLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysAndValuesBodyMatcher;
use Core\TestCase\TestParam;
use TestForDatetimeInModelLib\Controllers\BodyParamsController;
use TestForDatetimeInModelLib\Exceptions;
use TestForDatetimeInModelLib\Models;
use TestForDatetimeInModelLib\Utils\DateTimeHelper;

class BodyParamsControllerTest extends BaseTestController
{
    /**
     * @var BodyParamsController BodyParamsController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getBodyParamsController();
    }

    public function testSendRfc3339DateTime()
    {
        // Parameters for the API call
        $datetime = TestParam::custom(
            '1994-02-13T14:01:54.9571247Z',
            [DateTimeHelper::class, 'fromRfc3339DateTime']
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc3339DateTime($datetime);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(KeysAndValuesBodyMatcher::init(TestParam::object('{"passed":true}')))
            ->assert();
    }

    public function testSendRfc1123DateTime()
    {
        // Parameters for the API call
        $datetime = TestParam::custom(
            'Sun, 06 Nov 1994 08:49:37 GMT',
            [DateTimeHelper::class, 'fromRfc1123DateTime']
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc1123DateTime($datetime);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(KeysAndValuesBodyMatcher::init(TestParam::object('{"passed":true}')))
            ->assert();
    }

    public function testSendUnixDateTime()
    {
        // Parameters for the API call
        $datetime = TestParam::custom('"1484719381"', [DateTimeHelper::class, 'fromUnixTimestamp']);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendUnixDateTime($datetime);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(KeysAndValuesBodyMatcher::init(TestParam::object('{"passed":true}')))
            ->assert();
    }

    public function testSendRfc3339DateTimeArray()
    {
        // Parameters for the API call
        $datetimes = TestParam::custom(
            '["1994-02-13T14:01:54.9571247Z","1994-02-13T14:01:54.9571247Z"]',
            [DateTimeHelper::class, 'fromRfc3339DateTimeArray']
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc3339DateTimeArray($datetimes);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(KeysAndValuesBodyMatcher::init(TestParam::object('{"passed":true}')))
            ->assert();
    }

    public function testSendRfc1123DateTimeArray()
    {
        // Parameters for the API call
        $datetimes = TestParam::custom(
            '["Sun, 06 Nov 1994 08:49:37 GMT","Sun, 06 Nov 1994 08:49:37 GMT"]',
            [DateTimeHelper::class, 'fromRfc1123DateTimeArray']
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc1123DateTimeArray($datetimes);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(KeysAndValuesBodyMatcher::init(TestParam::object('{"passed":true}')))
            ->assert();
    }

    public function testSendUnixDateTimeArray()
    {
        // Parameters for the API call
        $datetimes = TestParam::custom(
            '[1484719381,1484719381]',
            [DateTimeHelper::class, 'fromUnixTimestampArray']
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendUnixDateTimeArray($datetimes);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(KeysAndValuesBodyMatcher::init(TestParam::object('{"passed":true}')))
            ->assert();
    }

    public function testRfc1123DateTimeInBodyAsModel()
    {
        // Parameters for the API call
        $body = TestParam::object('{"dateTime":"Sun, 06 Nov 1994 08:49:37 GMT"}', Models\Rfc1123DateTime::class);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc1123DateTimeInBodyAsModel($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testRfc3339DateTimeInBodyAsModel()
    {
        // Parameters for the API call
        $data = TestParam::object('{"dateTime":"1994-02-13T14:01:54.9571247Z"}', Models\DateTimeModel::class);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc3339DateTimeInBodyAsModel($data);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(KeysAndValuesBodyMatcher::init(TestParam::object('{"passed":true}')))
            ->assert();
    }

    public function testSendUnixDateTimeInBodyAsModel()
    {
        // Parameters for the API call
        $body = TestParam::object('{"dateTime":1484719381}', Models\UnixDateTime::class);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendUnixDateTimeInBodyAsModel($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testRfc3339DateTimeArrayInBodyAsModel()
    {
        // Parameters for the API call
        $data = TestParam::object(
            '{"dateTime":["1994-02-13T14:01:54.9571247Z","1994-02-13T14:01:54.9571247Z"]}',
            Models\Rfc3339DateTimeArray::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc3339DateTimeArrayInBodyAsModel($data);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testUnixDateTimeArrayInBodyAsModel()
    {
        // Parameters for the API call
        $data = TestParam::object('{"dateTime":[1484719381,1484719381]}', Models\UnixDateTimeArray::class);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendUnixDateTimeArrayInBodyAsModel($data);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testRfc3339DateTimeMapInBodyAsModel()
    {
        // Parameters for the API call
        $data = TestParam::object(
            '{"dateTime":{"key":"1994-02-13T14:01:54.9571247Z"}}',
            Models\Rfc3339DateTimeMap::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc3339DateTimeMapInBodyAsModel($data);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testRfc1123DateTimeMapInBodyAsModel()
    {
        // Parameters for the API call
        $data = TestParam::object(
            '{"dateTime":{"key":"Sun, 06 Nov 1994 08:49:37 GMT"}}',
            Models\Rfc1123DateTimeMap::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc1123DateTimeMapInBodyAsModel($data);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testUnixDateTimeMapInBodyAsModel()
    {
        // Parameters for the API call
        $data = TestParam::object('{"dateTime":{"key":1484719381}}', Models\UnixDateTimeMap::class);

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendUnixDateTimeMapInBodyAsModel($data);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testRfc1123DateTimeArrayInBodyAsModel()
    {
        // Parameters for the API call
        $data = TestParam::object(
            '{"dateTime":["Sun, 06 Nov 1994 08:49:37 GMT","Sun, 06 Nov 1994 08:49:37 GMT"]}',
            Models\Rfc1123DateTimeArray::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createSendRfc1123DateTimeArrayInBodyAsModel($data);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }
}
