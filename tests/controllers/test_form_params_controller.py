# -*- coding: utf-8 -*-

"""
testfordatetimeinmodel

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from testfordatetimeinmodel.api_helper import APIHelper
from testfordatetimeinmodel.models.rfc_1123_date_time import Rfc1123DateTime
from testfordatetimeinmodel.models.date_time_model import DateTimeModel
from testfordatetimeinmodel.models.unix_date_time import UnixDateTime
from testfordatetimeinmodel.models.rfc_3339_date_time_array import Rfc3339DateTimeArray
from testfordatetimeinmodel.models.rfc_1123_date_time_array import Rfc1123DateTimeArray
from testfordatetimeinmodel.models.unix_date_time_array import UnixDateTimeArray
from testfordatetimeinmodel.models.unix_date_time_map import UnixDateTimeMap
from testfordatetimeinmodel.models.rfc_3339_date_time_map import Rfc3339DateTimeMap
from testfordatetimeinmodel.models.rfc_1123_date_time_map import Rfc1123DateTimeMap


class FormParamsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(FormParamsControllerTests, cls).setUpClass()
        cls.controller = cls.client.form_params
        cls.response_catcher = cls.controller.http_call_back

    # Todo: Add description for test test_send_date_array
    def test_send_date_array(self):
        # Parameters for the API call
        dates = [dateutil.parser.parse(element).date() for element in APIHelper.json_deserialize('["1994-02-13","1994-02-13"]')]

        # Perform the API call through the SDK function
        result = self.controller.create_send_date_array(dates)

        # Test response code
        assert self.response_catcher.response.status_code == 200
        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"passed":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body, check_values = True)

    # Todo: Add description for test test_send_rfc_3339_date_time_array
    def test_send_rfc_3339_date_time_array(self):
        # Parameters for the API call
        datetimes = [element.datetime for element in APIHelper.json_deserialize('["1994-02-13T14:01:54.9571247Z","1994-02-13T14:01:54.9571247Z"]', APIHelper.RFC3339DateTime.from_value)]

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_3339_date_time_array(datetimes)

        # Test response code
        assert self.response_catcher.response.status_code == 200
        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"passed":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body, check_values = True)

    # Todo: Add description for test test_send_rfc_1123_date_time_array
    def test_send_rfc_1123_date_time_array(self):
        # Parameters for the API call
        datetimes = [element.datetime for element in APIHelper.json_deserialize('["Sun, 06 Nov 1994 08:49:37 GMT","Sun, 06 Nov 1994 08:49:37 GMT"]', APIHelper.HttpDateTime.from_value)]

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_1123_date_time_array(datetimes)

        # Test response code
        assert self.response_catcher.response.status_code == 200
        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"passed":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body, check_values = True)

    # Todo: Add description for test test_send_unix_date_time_array
    def test_send_unix_date_time_array(self):
        # Parameters for the API call
        datetimes = [element.datetime for element in APIHelper.json_deserialize('[1484719381,1484719381]', APIHelper.UnixDateTime.from_value)]

        # Perform the API call through the SDK function
        result = self.controller.create_send_unix_date_time_array(datetimes)

        # Test response code
        assert self.response_catcher.response.status_code == 200
        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"passed":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body, check_values = True)

    # Todo: Add description for test test_send_rfc_1123_date_time
    def test_send_rfc_1123_date_time(self):
        # Parameters for the API call
        datetime = APIHelper.HttpDateTime.from_value('Sun, 06 Nov 1994 08:49:37 GMT').datetime

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_1123_date_time(datetime)

        # Test response code
        assert self.response_catcher.response.status_code == 200
        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"passed":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body, check_values = True)

    # Todo: Add description for test test_send_rfc_3339_date_time
    def test_send_rfc_3339_date_time(self):
        # Parameters for the API call
        datetime = APIHelper.RFC3339DateTime.from_value('1994-02-13T14:01:54.9571247Z').datetime

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_3339_date_time(datetime)

        # Test response code
        assert self.response_catcher.response.status_code == 200
        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"passed":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body, check_values = True)

    # Todo: Add description for test test_send_unix_date_time
    def test_send_unix_date_time(self):
        # Parameters for the API call
        datetime = APIHelper.UnixDateTime.from_value(1484719381).datetime

        # Perform the API call through the SDK function
        result = self.controller.create_send_unix_date_time(datetime)

        # Test response code
        assert self.response_catcher.response.status_code == 200
        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"passed":true}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body, check_values = True)

    # Todo: Add description for test test_rfc_1123_date_time_in_form_as_model
    def test_rfc_1123_date_time_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":"Sun, 06 Nov 1994 08:49:37 GMT"}', Rfc1123DateTime.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_1123_date_time_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_rfc_3339_date_time_in_form_as_model
    def test_rfc_3339_date_time_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":"1994-02-13T14:01:54.9571247Z"}', DateTimeModel.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_3339_date_time_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_unix_date_time_in_form_as_model
    def test_unix_date_time_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":1484719381}', UnixDateTime.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_unix_date_time_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_rfc_3339_date_time_array_in_form_as_model
    def test_rfc_3339_date_time_array_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":["1994-02-13T14:01:54.9571247Z","1994-02-13T14:01:54.9'
            '571247Z"]}', Rfc3339DateTimeArray.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_3339_date_time_array_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_rfc_1123_date_time_array_in_form_as_model
    def test_rfc_1123_date_time_array_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":["Sun, 06 Nov 1994 08:49:37 GMT","Sun, 06 Nov 1994 08:'
            '49:37 GMT"]}', Rfc1123DateTimeArray.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_1123_date_time_array_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_unix_date_time_array_in_form_as_model
    def test_unix_date_time_array_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":[1484719381,1484719381]}', UnixDateTimeArray.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_unix_date_time_array_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_unix_date_time_map_in_form_as_model
    def test_unix_date_time_map_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":{"key":1484719381}}', UnixDateTimeMap.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_unix_date_time_map_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_rfc_3339_date_time_map_in_form_as_model
    def test_rfc_3339_date_time_map_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":{"key":"1994-02-13T14:01:54.9571247Z"}}', Rfc3339DateTimeMap.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_3339_date_time_map_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

    # Todo: Add description for test test_rfc_1123_date_time_map_in_form_as_model
    def test_rfc_1123_date_time_map_in_form_as_model(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"dateTime":{"key":"Sun, 06 Nov 1994 08:49:37 GMT"}}', Rfc1123DateTimeMap.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_rfc_1123_date_time_map_in_form_as_model(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

